#!/bin/bash

#==============================================================================
# Secure Boot Key Copy Utility
#==============================================================================
# Description: Helper script to copy Secure Boot keys to USB drive
# Author: MaxenceTech
# Usage: Run this script after system installation to copy keys to USB
# Prerequisites: USB drive formatted as FAT32, mounted
#==============================================================================

set -euo pipefail

echo "=============================================================================="
echo "Secure Boot Key Copy Utility"
echo "=============================================================================="
echo ""

# Check if keys exist
if [ ! -d "/etc/secureboot/keys" ]; then
    echo "Error: Secure Boot keys not found in /etc/secureboot/keys"
    echo "Please run the installation script first."
    exit 1
fi

# Check if required key files exist
required_files=("PK.crt" "KEK.crt" "db.crt")
missing_files=()

for file in "${required_files[@]}"; do
    if [ ! -f "/etc/secureboot/keys/$file" ]; then
        missing_files+=("$file")
    fi
done

if [ ${#missing_files[@]} -gt 0 ]; then
    echo "Error: Missing Secure Boot key files:"
    for file in "${missing_files[@]}"; do
        echo "  - $file"
    done
    exit 1
fi

# Show available USB devices
echo "Available USB storage devices:"
lsblk -o NAME,SIZE,TYPE,MOUNTPOINT | grep -E "(disk|part)" | grep -v "nvme\|sda"

echo ""
echo "Please ensure your USB drive is:"
echo "1. Formatted as FAT32"
echo "2. Mounted"
echo ""

read -p "Enter the mount point of your USB drive (e.g., /mnt/usb): " usb_mount

# Validate USB mount point
if [ ! -d "$usb_mount" ]; then
    echo "Error: Directory $usb_mount does not exist."
    exit 1
fi

# Check if it's writable
if ! touch "$usb_mount/test_write" 2>/dev/null; then
    echo "Error: Cannot write to $usb_mount. Check permissions or if it's mounted."
    exit 1
else
    rm -f "$usb_mount/test_write"
fi

# Create secureboot directory on USB
mkdir -p "$usb_mount/secureboot"

# Copy key files
echo "Copying Secure Boot keys to USB drive..."
for file in "${required_files[@]}"; do
    cp "/etc/secureboot/keys/$file" "$usb_mount/secureboot/"
    echo "  ✓ Copied $file"
done

# Create instructions file
cat > "$usb_mount/secureboot/ENROLLMENT_INSTRUCTIONS.txt" << 'EOF'
SECURE BOOT KEY ENROLLMENT INSTRUCTIONS
=======================================

Your Arch Linux system has been configured with custom Secure Boot keys.
To enable Secure Boot, you must enroll these keys in your UEFI firmware.

KEY FILES:
- PK.crt  (Platform Key)
- KEK.crt (Key Exchange Key)
- db.crt  (Signature Database Key)

ENROLLMENT PROCEDURE:
1. Reboot your system
2. Enter UEFI Setup (usually F2, F12, or DEL during boot)
3. Navigate to Security → Secure Boot settings
4. Enable "Custom Mode" or "Advanced Secure Boot" options
5. Clear any existing keys (if present)
6. Enroll keys in this ORDER:
   a) First: Enroll db.crt as Database Key
   b) Second: Enroll KEK.crt as Key Exchange Key
   c) Last: Enroll PK.crt as Platform Key (THIS ENABLES SECURE BOOT)
7. Save settings and exit UEFI Setup

IMPORTANT NOTES:
- Enrolling the Platform Key (PK.crt) will immediately enable Secure Boot
- Your system will only boot signed kernels after this
- Keep these key files safe - you'll need them if you reinstall
- If you lose these keys, you'll need to disable Secure Boot to boot your system

TROUBLESHOOTING:
- If the system won't boot after enrollment, disable Secure Boot in UEFI
- Check that all UKI files are present in /boot/EFI/Linux/
- Verify that systemd-ukify properly signed the kernel images

Generated by Arch Linux installation script
EOF

echo "  ✓ Created enrollment instructions"
echo ""
echo "Successfully copied Secure Boot keys to: $usb_mount/secureboot/"
echo ""
echo "Files copied:"
for file in "${required_files[@]}"; do
    echo "  - $file"
done
echo "  - ENROLLMENT_INSTRUCTIONS.txt"
echo ""
echo "You can now safely eject the USB drive and use it to enroll the keys"
echo "in your UEFI firmware after rebooting."
echo ""
echo "=============================================================================="