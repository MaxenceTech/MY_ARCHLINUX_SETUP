#!/bin/bash

set -euo pipefail 

# =========================
# Variables à personnaliser
# =========================
# Chemin vers l'image de base (QCOW2)
PATHBASEIMAGE="/var/lib/libvirt/images/atlas11-base-image.qcow2"
# Dossier de destination du disque (terminer par /)
DISKDESTINATIONFOLDER="/var/lib/libvirt/images/"
# Chemin vers l'ISO
ISOPATH="/var/lib/libvirt/images/driversandsoftware.iso"
# Chemin vers un autre disque à attacher (optionnel)
OTHERDISKPATH=""

# =========================
# Saisie des paramètres VM
# =========================
while :; do
    read -r -p "Nom de la VM (lettres/chiffres/tirets, 1-63, sans tiret au début/fin): " VMNAME
    if [[ "$VMNAME" =~ ^[a-zA-Z0-9]([a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?$ ]] && [ ${#VMNAME} -ge 1 ] && [ ${#VMNAME} -le 63 ]; then
        break
    else
        echo "Entrée invalide. Utilisez 1 à 63 caractères (lettres, chiffres, tirets uniquement, sans tirets au début ou à la fin)."
    fi
done

while :; do
    read -r -p "Titre de la VM (lettres/chiffres/espaces/tirets, 1-63, sans tiret au début/fin): " VMTITLE
    if [[ "$VMTITLE" =~ ^[a-zA-Z0-9]([a-zA-Z0-9 -]{0,61}[a-zA-Z0-9])?$ ]] && [ ${#VMTITLE} -ge 1 ] && [ ${#VMTITLE} -le 63 ]; then
        break
    else
        echo "Entrée invalide. Utilisez 1 à 63 caractères (lettres, chiffres, espaces, tirets uniquement, sans tirets au début ou à la fin)."
    fi
done

while :; do
    read -r -p "Quelle taille souhaitez-vous pour le disque principal (en Go, 27 minimum) ? " size
    if [[ $size =~ ^[0-9]{1,63}$ ]]  && [ $size -ge 27 ]; then
        break
    else
        echo "Taille invalide. Utilisez des chiffres uniquement et une taille supérieure ou égale à 27 Go."
    fi
done

while :; do
    read -r -p "Combien de RAM souhaitez-vous allouer à la VM ? (en Go, min 6, max 54) " RAMGB
    if [[ $RAMGB =~ ^[0-9]{1,63}$ ]]  && [ $RAMGB -ge 6 ] && [ $RAMGB -le 54 ]; then
        break
    else
        echo "Taille invalide. Utilisez des chiffres uniquement et une valeur comprise entre 6 et 54 Go."
    fi
done

while :; do
    read -r -p "Combien de cœurs souhaitez-vous allouer à la VM ? (min 2, max 20) " NBCOEUR
    if [[ $NBCOEUR =~ ^[0-9]{1,63}$ ]]  && [ $NBCOEUR -ge 2 ] && [ $NBCOEUR -le 20 ]; then
        break
    else
        echo "Nombre invalide. Utilisez des chiffres uniquement et une valeur comprise entre 2 et 20."
    fi
done

RAMSIZE1=$((RAMGB*1024))
RAMSIZE2=$((RAMGB*1024*1024))
UUID=$(uuidgen | tr '[:upper:]' '[:lower:]')
DISKLOCATION="${DISKDESTINATIONFOLDER}atlas11-disk-${VMNAME}.qcow2"
COMPLETEVMNAME="atlas11-gaming-thp-$VMNAME-$RAMSIZE1"

echo "[INFO] Vérification de l'existence du disque/VM..."
if [ -f "$DISKLOCATION" ] || virsh list --all --name | grep -qw "$COMPLETEVMNAME"; then
	echo "[ERREUR] Le disque cible ou la VM existent déjà. Abandon."
  exit
else
  echo "[INFO] Copie de l'image de base vers $DISKLOCATION..."
  cp "$PATHBASEIMAGE" "$DISKLOCATION"
  echo "[OK] Copie terminée."
fi

# =========================
# Création de la VM (XML)
# =========================
echo "[INFO] Définition de la VM dans libvirt..."
virsh define /dev/stdin <<EOF
<domain xmlns:qemu="http://libvirt.org/schemas/domain/qemu/1.0" type="kvm">
  <name>$COMPLETEVMNAME</name>
  <uuid>$UUID</uuid>
  <title>$VMTITLE</title>
  <metadata>
    <libosinfo:libosinfo xmlns:libosinfo="http://libosinfo.org/xmlns/libvirt/domain/1.0">
      <libosinfo:os id="http://microsoft.com/win/11"/>
    </libosinfo:libosinfo>
  </metadata>
  <memory unit="KiB">$RAMSIZE2</memory>
  <currentMemory unit="KiB">$RAMSIZE2</currentMemory>
  <memoryBacking>
    <hugepages/>
  </memoryBacking>
  <vcpu placement="static">$NBCOEUR</vcpu>
  <os firmware="efi">
    <type arch="x86_64" machine="pc-q35-10.0">hvm</type>
    <loader readonly="yes" secure="yes" type="pflash" format="raw">/usr/share/edk2/x64/OVMF_CODE.secboot.4m.fd</loader>
    <boot dev="hd"/>
  </os>
  <features>
    <acpi/>
    <apic/>
    <hyperv mode="custom">
      <relaxed state="on"/>
      <vapic state="on"/>
      <spinlocks state="on" retries="8191"/>
      <vpindex state="on"/>
      <synic state="on"/>
      <stimer state="on"/>
      <reset state="on"/>
      <vendor_id state="on" value="kvm hyperv"/>
      <frequencies state="on"/>
    </hyperv>
    <vmport state="off"/>
    <smm state="on"/>
  </features>
  <cpu mode="host-passthrough" check="none" migratable="on">
    <topology sockets="1" dies="1" clusters="1" cores="$NBCOEUR" threads="1"/>
  </cpu>
  <clock offset="localtime">
    <timer name="rtc" tickpolicy="catchup"/>
    <timer name="pit" tickpolicy="delay"/>
    <timer name="hpet" present="no"/>
    <timer name="hypervclock" present="yes"/>
  </clock>
  <on_poweroff>destroy</on_poweroff>
  <on_reboot>restart</on_reboot>
  <on_crash>destroy</on_crash>
  <pm>
    <suspend-to-mem enabled="no"/>
    <suspend-to-disk enabled="no"/>
  </pm>
  <devices>
    <emulator>/usr/bin/qemu-system-x86_64</emulator>
    <disk type="file" device="disk">
      <driver name="qemu" type="qcow2"/>
      <source file="$DISKLOCATION"/>
      <target dev="vda" bus="virtio"/>
      <address type="pci" domain="0x0000" bus="0x01" slot="0x00" function="0x0"/>
    </disk>
    <controller type="usb" index="0" model="qemu-xhci" ports="15">
      <address type="pci" domain="0x0000" bus="0x02" slot="0x00" function="0x0"/>
    </controller>
    <controller type="pci" index="0" model="pcie-root"/>
    <controller type="pci" index="1" model="pcie-root-port">
      <model name="pcie-root-port"/>
      <target chassis="1" port="0x10"/>
      <address type="pci" domain="0x0000" bus="0x00" slot="0x02" function="0x0" multifunction="on"/>
    </controller>
    <controller type="pci" index="2" model="pcie-root-port">
      <model name="pcie-root-port"/>
      <target chassis="2" port="0x11"/>
      <address type="pci" domain="0x0000" bus="0x00" slot="0x02" function="0x1"/>
    </controller>
    <controller type="pci" index="3" model="pcie-root-port">
      <model name="pcie-root-port"/>
      <target chassis="3" port="0x12"/>
      <address type="pci" domain="0x0000" bus="0x00" slot="0x02" function="0x2"/>
    </controller>
    <controller type="pci" index="4" model="pcie-root-port">
      <model name="pcie-root-port"/>
      <target chassis="4" port="0x13"/>
      <address type="pci" domain="0x0000" bus="0x00" slot="0x02" function="0x3"/>
    </controller>
    <controller type="pci" index="5" model="pcie-root-port">
      <model name="pcie-root-port"/>
      <target chassis="5" port="0x14"/>
      <address type="pci" domain="0x0000" bus="0x00" slot="0x02" function="0x4"/>
    </controller>
    <controller type="pci" index="6" model="pcie-root-port">
      <model name="pcie-root-port"/>
      <target chassis="6" port="0x15"/>
      <address type="pci" domain="0x0000" bus="0x00" slot="0x02" function="0x5"/>
    </controller>
    <controller type="pci" index="7" model="pcie-root-port">
      <model name="pcie-root-port"/>
      <target chassis="7" port="0x16"/>
      <address type="pci" domain="0x0000" bus="0x00" slot="0x02" function="0x6"/>
    </controller>
    <controller type="pci" index="8" model="pcie-root-port">
      <model name="pcie-root-port"/>
      <target chassis="8" port="0x17"/>
      <address type="pci" domain="0x0000" bus="0x00" slot="0x02" function="0x7"/>
    </controller>
    <controller type="pci" index="9" model="pcie-root-port">
      <model name="pcie-root-port"/>
      <target chassis="9" port="0x18"/>
      <address type="pci" domain="0x0000" bus="0x00" slot="0x03" function="0x0" multifunction="on"/>
    </controller>
    <controller type="pci" index="10" model="pcie-root-port">
      <model name="pcie-root-port"/>
      <target chassis="10" port="0x19"/>
      <address type="pci" domain="0x0000" bus="0x00" slot="0x03" function="0x1"/>
    </controller>
    <controller type="pci" index="11" model="pcie-root-port">
      <model name="pcie-root-port"/>
      <target chassis="11" port="0x1a"/>
      <address type="pci" domain="0x0000" bus="0x00" slot="0x03" function="0x2"/>
    </controller>
    <controller type="pci" index="12" model="pcie-root-port">
      <model name="pcie-root-port"/>
      <target chassis="12" port="0x1b"/>
      <address type="pci" domain="0x0000" bus="0x00" slot="0x03" function="0x3"/>
    </controller>
    <controller type="pci" index="13" model="pcie-root-port">
      <model name="pcie-root-port"/>
      <target chassis="13" port="0x1c"/>
      <address type="pci" domain="0x0000" bus="0x00" slot="0x03" function="0x4"/>
    </controller>
    <controller type="pci" index="14" model="pcie-root-port">
      <model name="pcie-root-port"/>
      <target chassis="14" port="0x1d"/>
      <address type="pci" domain="0x0000" bus="0x00" slot="0x03" function="0x5"/>
    </controller>
    <controller type="sata" index="0">
      <address type="pci" domain="0x0000" bus="0x00" slot="0x1f" function="0x2"/>
    </controller>
    <input type="mouse" bus="virtio">
      <address type="pci" domain="0x0000" bus="0x06" slot="0x00" function="0x0"/>
    </input>
    <input type="keyboard" bus="virtio">
      <address type="pci" domain="0x0000" bus="0x07" slot="0x00" function="0x0"/>
    </input>
    <input type="mouse" bus="ps2"/>
    <input type="keyboard" bus="ps2"/>
    <tpm model="tpm-crb">
      <backend type="emulator" version="2.0"/>
    </tpm>
    <graphics type="spice" autoport="yes">
      <listen type="address"/>
      <image compression="off"/>
    </graphics>
    <sound model="ich9">
      <address type="pci" domain="0x0000" bus="0x00" slot="0x1b" function="0x0"/>
    </sound>
    <audio id="1" type="pipewire" runtimeDir="/run/user/1000">
      <input name="qemuinput"/>
      <output name="qemuoutput"/>
    </audio>
    <video>
      <model type="none"/>
    </video>
    <hostdev mode="subsystem" type="pci" managed="yes">
      <source>
        <address domain="0x0000" bus="0x01" slot="0x00" function="0x0"/>
      </source>
      <address type="pci" domain="0x0000" bus="0x04" slot="0x00" function="0x0"/>
    </hostdev>
    <hostdev mode="subsystem" type="pci" managed="yes">
      <source>
        <address domain="0x0000" bus="0x01" slot="0x00" function="0x1"/>
      </source>
      <address type="pci" domain="0x0000" bus="0x05" slot="0x00" function="0x0"/>
    </hostdev>
    <hostdev mode="subsystem" type="usb" managed="yes">
      <source startupPolicy="optional">
        <vendor id="0x2357"/>
        <product id="0x0604"/>
      </source>
      <address type="usb" bus="0" port="1"/>
    </hostdev>
    <watchdog model="itco" action="none"/>
    <memballoon model="none"/>
  </devices>
  <qemu:commandline>
    <qemu:arg value="-device"/>
    <qemu:arg value="{'driver':'ivshmem-plain','id':'shmem0','memdev':'looking-glass'}"/>
    <qemu:arg value="-object"/>
    <qemu:arg value="{'qom-type':'memory-backend-file','id':'looking-glass','mem-path':'/dev/kvmfr0','size':67108864,'share':true}"/>
  </qemu:commandline>
</domain>
EOF
echo "[OK] VM définie."

# =========================
# Options d'installation
# =========================
while :; do
  read -r -p "Ajouter le réseau par défaut (y/n) ? " yn
	case $yn in 
		y | Y) echo "[INFO] Ajout de l'interface réseau...";
  			virsh attach-device "$COMPLETEVMNAME" /dev/stdin --config << EOF
<interface type="network">
  <source network="default"/>
  <model type="virtio"/>
</interface>
EOF
	 		read -r -p "Réseau ajouté. Appuyez sur Entrée pour continuer... ";
      		break;;
		n | N) read -r -p "Aucun réseau ajouté. Appuyez sur Entrée pour continuer... ";
      		break;;
		*) read -r -p "Entrée invalide. Appuyez sur Entrée pour continuer... ";;
	esac
done

while :; do
  read -r -p "Ajouter le CD-ROM drivers and software (y/n) ? " yn
	case $yn in 
		y | Y) echo "[INFO] Ajout du CD-ROM...";
  			virsh attach-device "$COMPLETEVMNAME" /dev/stdin --config << EOF
<disk type="file" device="cdrom">
  <driver name="qemu" type="raw"/>
  <source file="$ISOPATH"/>
  <target dev="sda" bus="sata"/>
  <readonly/>
</disk>
EOF
	 		read -r -p "CD-ROM 'drivers and software' ajouté. Appuyez sur Entrée pour continuer... ";
      		break;;
		n | N) read -r -p "Aucun CD-ROM ajouté. Appuyez sur Entrée pour continuer... ";
      		break;;
		*) read -r -p "Entrée invalide. Appuyez sur Entrée pour continuer... ";;
	esac
done

if [ -n "$OTHERDISKPATH" ] && [ -f "$OTHERDISKPATH" ] ; then
  while :; do
    read -r -p "Ajouter un autre disque (y/n) ? " yn
    case $yn in 
      y | Y) echo "[INFO] Ajout du disque supplémentaire...";
        virsh attach-device "$COMPLETEVMNAME" /dev/stdin --config << EOF
<disk type="file" device="disk">
  <driver name="qemu" type="qcow2"/>
  <source file="$OTHERDISKPATH"/>
  <target dev="vdb" bus="virtio"/>
</disk>
EOF
        read -r -p "Disque supplémentaire ajouté. Appuyez sur Entrée pour continuer... ";
        break;;
      n | N) read -r -p "Aucun disque supplémentaire ajouté. Appuyez sur Entrée pour continuer... ";
        break;;
      *) read -r -p "Entrée invalide. Appuyez sur Entrée pour continuer... ";;
    esac
  done
fi

# =========================
# Redimensionnement du disque
# =========================
echo "[INFO] Redimensionnement de l'image à ${size}G..."
qemu-img resize "$DISKLOCATION" "${size}G"
echo "[INFO] Préparation du périphérique NBD..."
sudo modprobe nbd max_part=8
sudo qemu-nbd --disconnect /dev/nbd0 || true
sudo qemu-nbd --connect=/dev/nbd0 "$DISKLOCATION"
sleep 3
echo "[INFO] Réparation de la table de partitions (sgdisk -e)..."
sudo sgdisk -e /dev/nbd0
sleep 2
echo "[INFO] Extension de la partition 3 à 100% (parted)..."
sudo parted -s /dev/nbd0 resizepart 3 100%
sleep 2
echo "[INFO] Redimensionnement du système de fichiers NTFS (ntfsresize)..."
echo "y" | sudo ntfsresize -f /dev/nbd0p3
sleep 2
echo "[INFO] Déconnexion du périphérique NBD..."
sudo qemu-nbd --disconnect /dev/nbd0
sleep 5
sudo rmmod nbd
echo "[OK] Redimensionnement terminé."

echo "Succès ! Fin du script."
