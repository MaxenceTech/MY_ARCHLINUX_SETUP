# Secure Boot Configuration with systemd-ukify
# This file documents the Secure Boot setup and systemd-ukify configuration

# Key Generation Details
# =====================
# The installation script generates three types of keys:

# 1. Platform Key (PK) - Root of trust
PK_SUBJECT="/CN=Platform Key/"
PK_FILES="PK.key, PK.crt, PK.pem"

# 2. Key Exchange Key (KEK) - Intermediate key
KEK_SUBJECT="/CN=Key Exchange Key/"
KEK_FILES="KEK.key, KEK.crt, KEK.pem"

# 3. Database Key (db) - Code signing key
DB_SUBJECT="/CN=Signature Database key/"
DB_FILES="db.key, db.crt, db.pem"

# Key Properties
RSA_KEY_SIZE="2048"
VALIDITY_PERIOD="7300 days"  # ~20 years
HASH_ALGORITHM="sha256"

# Key Storage Location
KEY_DIRECTORY="/etc/secureboot/keys"

# File Permissions
KEY_PERMISSIONS="400"      # Private keys - read-only by root
CERT_PERMISSIONS="444"     # Certificates - world-readable

# systemd-ukify Configuration
# ==========================
# Located in: /etc/kernel/ukify.conf

# Generated UKI Files
# ==================
UKI_DIRECTORY="/boot/EFI/Linux"
UKI_FILES=(
    "arch-nvidia.efi"           # Primary configuration with NVIDIA
    "arch-gpupassthrough.efi"   # GPU passthrough configuration  
    "arch-fallback.efi"         # Fallback with full initramfs
)

# UKI Components
# ==============
# Each UKI contains:
# - Linux kernel (/boot/vmlinuz-linux)
# - Intel microcode (/boot/intel-ucode.img)
# - Initramfs (/boot/initramfs-linux.img or -fallback)
# - Kernel command line with LUKS parameters
# - Digital signature (using db.key/db.crt)

# Automatic UKI Generation
# ========================
# Location: /etc/kernel/install.d/90-ukify.install
# Triggered by: Kernel updates via pacman
# Purpose: Automatically regenerates and signs UKIs when kernel is updated

# Secure Boot Boot Process
# ========================
# 1. UEFI firmware verifies UKI signature using enrolled db certificate
# 2. If signature is valid, UKI is loaded and executed
# 3. UKI contains everything needed to boot (kernel, initramfs, cmdline)
# 4. systemd in initramfs handles LUKS decryption prompts
# 5. System boots into encrypted root filesystem

# systemd-boot Configuration
# ==========================
# Loader config: /boot/loader/loader.conf
# - Uses UKI auto-discovery (no manual entries needed)
# - UKI files in /boot/EFI/Linux/ are automatically detected
# - Default timeout: 6 seconds
# - Editor disabled for security

# Command Line Parameters for Encrypted Boot
# ==========================================
# Base parameters for all configurations:
# - root=UUID=<root-device-uuid>
# - rootfstype=ext4
# - rd.luks.name=<root-uuid>=cryptroot
# - rd.luks.name=<swap-uuid>=cryptswap
# - resume=/dev/mapper/cryptswap

# Additional parameters:
# - Performance optimizations (zswap, hibernate settings)
# - Intel IOMMU settings
# - Security mitigations

# UEFI Enrollment Process
# ======================
# 1. Boot into UEFI Setup
# 2. Navigate to Security > Secure Boot
# 3. Enable Custom Mode or Advanced options
# 4. Clear existing keys (Microsoft keys)
# 5. Enroll in order: db.crt → KEK.crt → PK.crt
# 6. PK enrollment immediately activates Secure Boot

# Important Security Notes
# =======================
# - Keep backup copies of all keys
# - PK.key allows creating new KEK/db keys
# - Losing PK.key requires disabling Secure Boot to regain access
# - Only signed kernels will boot after enrollment
# - systemd-ukify automatically signs all generated UKIs

# Troubleshooting
# ==============
# - If boot fails: Disable Secure Boot in UEFI
# - Check UKI files exist in /boot/EFI/Linux/
# - Verify signatures: sbverify --list /boot/EFI/Linux/arch-*.efi
# - Check enrollment: efi-readvar -v PK KEK db
# - Regenerate UKIs: Run /etc/kernel/install.d/90-ukify.install add